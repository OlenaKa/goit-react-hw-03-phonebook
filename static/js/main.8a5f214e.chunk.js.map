{"version":3,"sources":["Components/ContactForm/ContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","setState","target","value","onSubmitClick","this","props","onSubmit","className","type","pattern","title","required","onChange","Component","ContactItem","contacts","onDelete","map","contact","onClick","id","ContactList","Filter","onInput","App","filter","filterContacts","normalizedFilter","toLowerCase","includes","handleSubmit","preventDefault","newContact","uuidv4","find","alert","prevState","deleteContact","key","JSON","parce","localStorage","getItem","prevProps","setItem","stringify","filteredContacts","onFormInput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a5f214e.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  render() {\n    const { onSubmitClick } = this.props;\n    return (\n      <form onSubmit={onSubmitClick} className=\"form\">\n        <label className=\"name-label\">\n          Name{\" \"}\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label className=\"number-label\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\"> Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import \"./ContactItem.css\";\n\nconst ContactItem = ({ contacts, onDelete }) =>\n  contacts.map((contact) => (\n    <li key={contact.id} className=\"contactItem\">\n      <p>\n        {contact.name}: {contact.number}\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => onDelete(contact.id)}\n        className=\"delete-contact-btn\"\n      >\n        Delete\n      </button>\n    </li>\n  ));\n\nexport default ContactItem;\n","import ContactItem from \"../ContactItem\";\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul>\n    <ContactItem contacts={contacts} onDelete={onDelete} />\n  </ul>\n);\n\nexport default ContactList;\n","const Filter = ({ onInput }) => (\n  <>\n    <h2>Find contacts by name</h2>\n    <input\n      type=\"text\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      onChange={onInput}\n    />\n  </>\n);\nexport default Filter;\n","import { Component } from \"react\"\nimport \"./App.css\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport ContactForm from \"./Components/ContactForm/\"\nimport ContactList from \"./Components/ContactList\"\nimport Filter from \"./Components/Filter\"\n\nclass App extends Component {\n  state = {\n    contacts: [],\n\n    filter: \"\",\n  }\n  conponentDidMount() {\n    const contacts = JSON.parce(localStorage.getItem(\"contacts\"))\n    this.setState({ contacts: contacts })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"constacts\", JSON.stringify(this.state.contacts))\n    }\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  filterContacts = () => {\n    const { contacts, filter } = this.state\n    const normalizedFilter = filter.toLowerCase()\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    )\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    const newContact = {\n      id: uuidv4(),\n      name: e.target[0].value,\n      number: e.target[1].value,\n    }\n\n    const nameCheck = this.state.contacts.find(\n      (contact) => contact.name === newContact.name\n    )\n\n    nameCheck\n      ? alert(`${newContact.name}, is already in contacts`)\n      : this.setState((prevState) => ({\n          contacts: [...prevState.contacts, newContact],\n        }))\n\n    e.target[0].value = \"\"\n    e.target[1].value = \"\"\n  }\n\n  deleteContact = (key) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== key),\n    }))\n  }\n\n  render() {\n    // console.log(this.state)\n\n    const filteredContacts = this.filterContacts()\n    // console.log(filteredContacts)\n    return (\n      <>\n        <h1> Phonebook </h1>\n        <ContactForm\n          onFormInput={this.handleChange}\n          onSubmitClick={this.handleSubmit}\n        />\n        <h2> Contacts </h2>\n        <Filter onInput={this.handleChange} />\n        <ContactList\n          contacts={filteredContacts}\n          onDelete={this.deleteContact}\n        />\n      </>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}